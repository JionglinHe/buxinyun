#ifndef _RTC6763_H
#define _RTC6763_H

#include "printf.h"
#include "cpu.h"
#include "asm/spi.h"
#include "timer.h"
#include "app_config.h"
#include "event.h"
#include "system/includes.h"
#include "generic/gpio.h"
#include "generic/typedef.h"
#include "asm/port_waked_up.h"
extern const struct device_operations rtc6763_dev_ops;

#define RTC6763_RESET_PORT  IO_PORTB_12
#define RTC6763_INT_PORT    IO_PORTB_13


// rtc6763 reg
#define RF_CONFIG2       0x1
#define RF_STATUS        0x2
#define RF_W_BB_ADDR     0xE
#define RF_R_BB_ADDR     0xF
#define RF_OP_MODE       0x09
#define RF_BB_DATA       0x10
#define RF_TIM_STATUS    0x13
#define RF_W_RF_ADDR1    0x22
#define RF_R_RF_ADDR1    0x23
#define RF_RF_DATA1      0x24
#define RF_TX_FIFO       0x1F
#define RF_RX_FIFO       0x20
#define RF_PMU_ADDR      0x32
#define RF_PMU_DATA      0x33
#define RF_CONFIG3       0x35
#define RF_CONFIG4       0x36
#define RF_DBGCONF       0x7C

typedef struct {
    int				gpio_pin;
    int				interrupt_mode;
    int				interrupt_edge_control;
    int				interrupt_event;
    void			*isr_data;
    void	(*isr_func)(void *);
} rtc676x_gpio_interrupt_info;

typedef struct {
    u8 add;
    u8 value;
};
u8 pmu_cfg[] = {
// 0x32,0x1c,0x33,0x0,
    0x32, 0x1d, 0x33, 0x0,
    0x32,	0x9, 0x33, 0x1,
    0x32,	0x12, 0x33, 0x4,
    0x32,	0x0, 0x33, 0x35,
    0x32,	0x01, 0x33, 0x53,
    0x32,	0x02, 0x33, 0x67,
    0x32,	0x3, 0x33, 0x56,
    0x32,	0x5, 0x33, 0x85,
    0x32,	0x6, 0x33, 0x41

};

u8 rf_cfg[] = {
    0x02, 0x60, 0xf0, 0x00, 0x00,
    0x03, 0x04, 0xaa, 0x20, 0x00,
    0x04, 0x2E, 0x07, 0x04, 0x00,
    0x0b, 0x4c, 0x34, 0x00, 0x00,
    0x0d, 0x64, 0x40, 0x04, 0x00,
    0x0e, 0x10, 0x74, 0x03, 0x00,
    0x16, 0x23, 0x59, 0x00, 0x00,
    0x17, 0x27, 0x51, 0x00, 0x00,
    0x1e, 0x00, 0x20, 0x00, 0x00,
    0x1a, 0x46, 0x49, 0x02, 0x00,
    0x06, 0x68, 0x7e, 0x04, 0x00,
    0x07, 0xab, 0x99, 0x08, 0x00,
    0x08, 0x77, 0x66, 0x05, 0x00,
    0x09, 0x45, 0x34, 0x03, 0x00,
    0x0a, 0x02, 0x00, 0x00, 0x00
};

u8 bb_cfg[] = {
    0x00, 0xc0,
    0x13, 0x40,
    0x19, 0x35,
    0x1d, 0x78,
    0x22, 0x6e,
    0x66, 0x01,
    0x6a, 0x09,
    0x6b, 0x06,
    0x6d, 0x01,
    0x1b, 0xf0,
    0x1c, 0x0f
};
u8 g_cfg[] = {
    0x1c, 0x21, 0x22, 0x23, 0x24,
    0x1c, 0x25, 0x26, 0x27, 0x2d,
    0x1c, 0x2E, 0x2F, 0x30, 0x31,
    0x1c, 0x32, 0x33, 0x34, 0x35,
    0x1c, 0x36, 0x37, 0x38, 0x39,
    0x1c, 0x3a, 0x3b, 0x46, 0x47,
    0x1c, 0x48, 0x49, 0x4a, 0x4b,
    0x1c, 0x4c, 0x4d, 0x4e, 0x4f,
    0x1c, 0x50, 0x51, 0x52, 0x53,
    0x1c, 0x54, 0x55, 0x56, 0x57,
    0x1c, 0x58, 0x59, 0x5f, 0x60,
    0x1c, 0x61, 0x62, 0x63, 0x64,
    0x1c, 0x65, 0x66, 0x67, 0x68,
    0x1c, 0x69, 0x6a, 0x6b, 0x6c,
    0x1c, 0x6b, 0x6a, 0x69, 0x68,
    0x1c, 0x67, 0x66, 0x65, 0x64,
    0x1c, 0x63, 0x62, 0x61, 0x60,
    0x1c, 0x5f, 0x59, 0x58, 0x57,
    0x1c, 0x56, 0x55, 0x54, 0x53,
    0x1c, 0x52, 0x51, 0x50, 0x4F


};
#endif //_RTC6763_H

